//------------------------------------------------------------------------------
// top.v generated by "gen_ahb_top.sh"
//------------------------------------------------------------------------------
//   +------------+  +----------+  +------------+  +------------+
//   | AMBA AXI4  |  | axi4to3  |  | axi3to4 4  |  | AMBA AXI4  |
//   | Tester     |==|          |==|            |==| Memory     |
//   +------------+  +----------+  +------------+  +------------+
//------------------------------------------------------------------------------
`timescale 1ns/1ns
`ifndef CLK_FREQ
`define CLK_FREQ       50000000
`endif
`ifdef __ICARUS__
`define BUS_DELAY
`else
`ifndef BUS_DELAY
`define BUS_DELAY #(1)
`endif
`endif
`ifndef WIDTH_AD
`define WIDTH_AD  32
`endif
`ifndef WIDTH_DA
`define WIDTH_DA  32
`endif
`ifndef SIZE_IN_BYTES
`define SIZE_IN_BYTES  (4*1024*1024 )
`endif
`define AMBA_AXI4

module top;
   //---------------------------------------------------------------------------
   localparam WIDTH_ID    = 4    // ID width in bits
            , WIDTH_AD    =`WIDTH_AD    // address width
            , WIDTH_DA    =`WIDTH_DA    // data width
            , WIDTH_DS    =(WIDTH_DA/8)  // data strobe width
            , WIDTH_SID   =WIDTH_ID // ID for slave
            ;
   //---------------------------------------------------------------------------
   localparam CLK_PERIOD_HALF=1_000_000_000/(`CLK_FREQ*2);
   reg         ACLK   = 1'b0; always #(CLK_PERIOD_HALF) ACLK=~ACLK;
   reg         ARESETn= 1'b0; initial #155 ARESETn=1'b1;
   //---------------------------------------------------------------------------
   wire  [WIDTH_ID-1:0]     `BUS_DELAY BUS_AWID       [0:2];
   wire  [WIDTH_AD-1:0]     `BUS_DELAY BUS_AWADDR     [0:2];
   wire  [ 7:0]             `BUS_DELAY BUS_AWLEN      [0:2];
   wire  [ 1:0]             `BUS_DELAY BUS_AWLOCK     [0:2];
   wire  [ 2:0]             `BUS_DELAY BUS_AWSIZE     [0:2];
   wire  [ 1:0]             `BUS_DELAY BUS_AWBURST    [0:2];
   `ifdef AMBA_AXI_CACHE
   wire  [ 3:0]             `BUS_DELAY BUS_AWCACHE    [0:2];
   `endif
   `ifdef AMBA_AXI_PROT
   wire  [ 2:0]             `BUS_DELAY BUS_AWPROT     [0:2];
   `endif
   wire  [ 2:0]             `BUS_DELAY BUS_AWVALID         ;
   wire  [ 2:0]             `BUS_DELAY BUS_AWREADY         ;
   wire  [WIDTH_ID-1:0]     `BUS_DELAY BUS_WID        [0:2];
   wire  [WIDTH_DA-1:0]     `BUS_DELAY BUS_WDATA      [0:2];
   wire  [WIDTH_DS-1:0]     `BUS_DELAY BUS_WSTRB      [0:2];
   wire  [ 2:0]             `BUS_DELAY BUS_WLAST           ;
   wire  [ 2:0]             `BUS_DELAY BUS_WVALID          ;
   wire  [ 2:0]             `BUS_DELAY BUS_WREADY          ;
   wire  [WIDTH_ID-1:0]     `BUS_DELAY BUS_BID        [0:2];
   wire  [ 1:0]             `BUS_DELAY BUS_BRESP      [0:2];
   wire  [ 2:0]             `BUS_DELAY BUS_BVALID          ;
   wire  [ 2:0]             `BUS_DELAY BUS_BREADY          ;
   wire  [WIDTH_ID-1:0]     `BUS_DELAY BUS_ARID       [0:2];
   wire  [WIDTH_AD-1:0]     `BUS_DELAY BUS_ARADDR     [0:2];
   wire  [ 7:0]             `BUS_DELAY BUS_ARLEN      [0:2];
   wire  [ 1:0]             `BUS_DELAY BUS_ARLOCK     [0:2];
   wire  [ 2:0]             `BUS_DELAY BUS_ARSIZE     [0:2];
   wire  [ 1:0]             `BUS_DELAY BUS_ARBURST    [0:2];
   `ifdef AMBA_AXI_CACHE
   wire  [ 3:0]             `BUS_DELAY BUS_ARCACHE    [0:2];
   `endif
   `ifdef AMBA_AXI_PROT
   wire  [ 2:0]             `BUS_DELAY BUS_ARPROT     [0:2];
   `endif
   wire  [ 2:0]             `BUS_DELAY BUS_ARVALID         ;
   wire  [ 2:0]             `BUS_DELAY BUS_ARREADY         ;
   wire  [WIDTH_ID-1:0]     `BUS_DELAY BUS_RID        [0:2];
   wire  [WIDTH_DA-1:0]     `BUS_DELAY BUS_RDATA      [0:2];
   wire  [ 1:0]             `BUS_DELAY BUS_RRESP      [0:2];
   wire  [ 2:0]             `BUS_DELAY BUS_RLAST           ;
   wire  [ 2:0]             `BUS_DELAY BUS_RVALID          ;
   wire  [ 2:0]             `BUS_DELAY BUS_RREADY          ;
   //---------------------------------------------------------------------------
   // It generates test transactions through AMBA AXI4.
   axi4_tester #(.WIDTH_ID (WIDTH_ID ) // ID width in bits
                ,.WIDTH_AD (WIDTH_AD ) // address width
                ,.WIDTH_DA (WIDTH_DA ) // data width
                ,.P_SIZE_IN_BYTES(`SIZE_IN_BYTES))
   u_tester (
         .ARESETn   (ARESETn      )
       , .ACLK      (ACLK         )
       , .AWID      (BUS_AWID    [0])
       , .AWADDR    (BUS_AWADDR  [0])
       , .AWLEN     (BUS_AWLEN   [0])
       , .AWLOCK    (BUS_AWLOCK  [0][0])
       , .AWSIZE    (BUS_AWSIZE  [0])
       , .AWBURST   (BUS_AWBURST [0])
       `ifdef AMBA_AXI_CACHE
       , .AWCACHE   (BUS_AWCACHE [0])
       `endif
       `ifdef AMBA_AXI_PROT
       , .AWPROT    (BUS_AWPROT  [0])
       `endif
       , .AWVALID   (BUS_AWVALID [0])
       , .AWREADY   (BUS_AWREADY [0])
       , .WDATA     (BUS_WDATA   [0])
       , .WSTRB     (BUS_WSTRB   [0])
       , .WLAST     (BUS_WLAST   [0])
       , .WVALID    (BUS_WVALID  [0])
       , .WREADY    (BUS_WREADY  [0])
       , .BID       (BUS_BID     [0])
       , .BRESP     (BUS_BRESP   [0])
       , .BVALID    (BUS_BVALID  [0])
       , .BREADY    (BUS_BREADY  [0])
       , .ARID      (BUS_ARID    [0])
       , .ARADDR    (BUS_ARADDR  [0])
       , .ARLEN     (BUS_ARLEN   [0])
       , .ARLOCK    (BUS_ARLOCK  [0][0])
       , .ARSIZE    (BUS_ARSIZE  [0])
       , .ARBURST   (BUS_ARBURST [0])
       `ifdef AMBA_AXI_CACHE
       , .ARCACHE   (BUS_ARCACHE [0])
       `endif
       `ifdef AMBA_AXI_PROT
       , .ARPROT    (BUS_ARPROT  [0])
       `endif
       , .ARVALID   (BUS_ARVALID [0])
       , .ARREADY   (BUS_ARREADY [0])
       , .RID       (BUS_RID     [0])
       , .RDATA     (BUS_RDATA   [0])
       , .RRESP     (BUS_RRESP   [0])
       , .RLAST     (BUS_RLAST   [0])
       , .RVALID    (BUS_RVALID  [0])
       , .RREADY    (BUS_RREADY  [0])
   );
   assign BUS_AWLOCK[0][1]=1'b0;
   assign BUS_ARLOCK[0][1]=1'b0;
   //---------------------------------------------------------------------------
   // It converts AMBA AXI4 to AXI3
   axi4to3 #(.AXI_WIDTH_ID(WIDTH_ID)
            ,.AXI_WIDTH_AD(WIDTH_AD)
            ,.AXI_WIDTH_DA(WIDTH_DA))
   u_axi4to3  (
          .ARESETn             (ARESETn        )
        , .ACLK                (ACLK           )
        , .S_AWID              (BUS_AWID    [0])
        , .S_AWADDR            (BUS_AWADDR  [0])
        , .S_AWLEN             (BUS_AWLEN   [0])
        , .S_AWLOCK            (BUS_AWLOCK  [0][0])
        , .S_AWSIZE            (BUS_AWSIZE  [0])
        , .S_AWBURST           (BUS_AWBURST [0])
        `ifdef AMBA_AXI_CACHE
        , .S_AWCACHE           (BUS_AWCACHE [0])
        `endif
        `ifdef AMBA_AXI_PROT
        , .S_AWPROT            (BUS_AWPROT  [0])
        `endif
        , .S_AWVALID           (BUS_AWVALID [0])
        , .S_AWREADY           (BUS_AWREADY [0])
        , .S_WDATA             (BUS_WDATA   [0])
        , .S_WSTRB             (BUS_WSTRB   [0])
        , .S_WLAST             (BUS_WLAST   [0])
        , .S_WVALID            (BUS_WVALID  [0])
        , .S_WREADY            (BUS_WREADY  [0])
        , .S_BID               (BUS_BID     [0])
        , .S_BRESP             (BUS_BRESP   [0])
        , .S_BVALID            (BUS_BVALID  [0])
        , .S_BREADY            (BUS_BREADY  [0])
        , .S_ARID              (BUS_ARID    [0])
        , .S_ARADDR            (BUS_ARADDR  [0])
        , .S_ARLEN             (BUS_ARLEN   [0])
        , .S_ARLOCK            (BUS_ARLOCK  [0][0])
        , .S_ARSIZE            (BUS_ARSIZE  [0])
        , .S_ARBURST           (BUS_ARBURST [0])
        `ifdef AMBA_AXI_CACHE
        , .S_ARCACHE           (BUS_ARCACHE [0])
        `endif
        `ifdef AMBA_AXI_PROT
        , .S_ARPROT            (BUS_ARPROT  [0])
        `endif
        , .S_ARVALID           (BUS_ARVALID [0])
        , .S_ARREADY           (BUS_ARREADY [0])
        , .S_RID               (BUS_RID     [0])
        , .S_RDATA             (BUS_RDATA   [0])
        , .S_RRESP             (BUS_RRESP   [0])
        , .S_RLAST             (BUS_RLAST   [0])
        , .S_RVALID            (BUS_RVALID  [0])
        , .S_RREADY            (BUS_RREADY  [0])
        , .M_AWID              (BUS_AWID    [1])
        , .M_AWADDR            (BUS_AWADDR  [1])
        , .M_AWLEN             (BUS_AWLEN   [1][3:0])
        , .M_AWLOCK            (BUS_AWLOCK  [1])
        , .M_AWSIZE            (BUS_AWSIZE  [1])
        , .M_AWBURST           (BUS_AWBURST [1])
        `ifdef AMBA_AXI_CACHE
        , .M_AWCACHE           (BUS_AWCACHE [1])
        `endif
        `ifdef AMBA_AXI_PROT
        , .M_AWPROT            (BUS_AWPROT  [1])
        `endif
        , .M_AWVALID           (BUS_AWVALID [1])
        , .M_AWREADY           (BUS_AWREADY [1])
        , .M_WID               (BUS_WID     [1])
        , .M_WDATA             (BUS_WDATA   [1])
        , .M_WSTRB             (BUS_WSTRB   [1])
        , .M_WLAST             (BUS_WLAST   [1])
        , .M_WVALID            (BUS_WVALID  [1])
        , .M_WREADY            (BUS_WREADY  [1])
        , .M_BID               (BUS_BID     [1])
        , .M_BRESP             (BUS_BRESP   [1])
        , .M_BVALID            (BUS_BVALID  [1])
        , .M_BREADY            (BUS_BREADY  [1])
        , .M_ARID              (BUS_ARID    [1])
        , .M_ARADDR            (BUS_ARADDR  [1])
        , .M_ARLEN             (BUS_ARLEN   [1][3:0])
        , .M_ARLOCK            (BUS_ARLOCK  [1])
        , .M_ARSIZE            (BUS_ARSIZE  [1])
        , .M_ARBURST           (BUS_ARBURST [1])
        `ifdef AMBA_AXI_CACHE
        , .M_ARCACHE           (BUS_ARCACHE [1])
        `endif
        `ifdef AMBA_AXI_PROT
        , .M_ARPROT            (BUS_ARPROT  [1])
        `endif
        , .M_ARVALID           (BUS_ARVALID [1])
        , .M_ARREADY           (BUS_ARREADY [1])
        , .M_RID               (BUS_RID     [1])
        , .M_RDATA             (BUS_RDATA   [1])
        , .M_RRESP             (BUS_RRESP   [1])
        , .M_RLAST             (BUS_RLAST   [1])
        , .M_RVALID            (BUS_RVALID  [1])
        , .M_RREADY            (BUS_RREADY  [1])
   );
   assign BUS_AWLEN [1][7:4]=4'h0;
   assign BUS_ARLEN [1][7:4]=4'h0;
   //---------------------------------------------------------------------------
   // It converts AMBA AXI3 to AXI4
   axi3to4 #(.AXI_WIDTH_ID(WIDTH_ID)
            ,.AXI_WIDTH_AD(WIDTH_AD)
            ,.AXI_WIDTH_DA(WIDTH_DA))
   u_axi3to4  (
          .ARESETn             (ARESETn        )
        , .ACLK                (ACLK           )
        , .S_AWID              (BUS_AWID    [1])
        , .S_AWADDR            (BUS_AWADDR  [1])
        , .S_AWLEN             (BUS_AWLEN   [1][3:0])
        , .S_AWLOCK            (BUS_AWLOCK  [1])
        , .S_AWSIZE            (BUS_AWSIZE  [1])
        , .S_AWBURST           (BUS_AWBURST [1])
        `ifdef AMBA_AXI_CACHE
        , .S_AWCACHE           (BUS_AWCACHE [1])
        `endif
        `ifdef AMBA_AXI_PROT
        , .S_AWPROT            (BUS_AWPROT  [1])
        `endif
        , .S_AWVALID           (BUS_AWVALID [1])
        , .S_AWREADY           (BUS_AWREADY [1])
        , .S_WID               (BUS_WID     [1])
        , .S_WDATA             (BUS_WDATA   [1])
        , .S_WSTRB             (BUS_WSTRB   [1])
        , .S_WLAST             (BUS_WLAST   [1])
        , .S_WVALID            (BUS_WVALID  [1])
        , .S_WREADY            (BUS_WREADY  [1])
        , .S_BID               (BUS_BID     [1])
        , .S_BRESP             (BUS_BRESP   [1])
        , .S_BVALID            (BUS_BVALID  [1])
        , .S_BREADY            (BUS_BREADY  [1])
        , .S_ARID              (BUS_ARID    [1])
        , .S_ARADDR            (BUS_ARADDR  [1])
        , .S_ARLEN             (BUS_ARLEN   [1][3:0])
        , .S_ARLOCK            (BUS_ARLOCK  [1])
        , .S_ARSIZE            (BUS_ARSIZE  [1])
        , .S_ARBURST           (BUS_ARBURST [1])
        `ifdef AMBA_AXI_CACHE
        , .S_ARCACHE           (BUS_ARCACHE [1])
        `endif
        `ifdef AMBA_AXI_PROT
        , .S_ARPROT            (BUS_ARPROT  [1])
        `endif
        , .S_ARVALID           (BUS_ARVALID [1])
        , .S_ARREADY           (BUS_ARREADY [1])
        , .S_RID               (BUS_RID     [1])
        , .S_RDATA             (BUS_RDATA   [1])
        , .S_RRESP             (BUS_RRESP   [1])
        , .S_RLAST             (BUS_RLAST   [1])
        , .S_RVALID            (BUS_RVALID  [1])
        , .S_RREADY            (BUS_RREADY  [1])
        , .M_AWID              (BUS_AWID    [2])
        , .M_AWADDR            (BUS_AWADDR  [2])
        , .M_AWLEN             (BUS_AWLEN   [2])
        , .M_AWLOCK            (BUS_AWLOCK  [2][0])
        , .M_AWSIZE            (BUS_AWSIZE  [2])
        , .M_AWBURST           (BUS_AWBURST [2])
        `ifdef AMBA_AXI_CACHE
        , .M_AWCACHE           (BUS_AWCACHE [2])
        `endif
        `ifdef AMBA_AXI_PROT
        , .M_AWPROT            (BUS_AWPROT  [2])
        `endif
        , .M_AWVALID           (BUS_AWVALID [2])
        , .M_AWREADY           (BUS_AWREADY [2])
        , .M_WDATA             (BUS_WDATA   [2])
        , .M_WSTRB             (BUS_WSTRB   [2])
        , .M_WLAST             (BUS_WLAST   [2])
        , .M_WVALID            (BUS_WVALID  [2])
        , .M_WREADY            (BUS_WREADY  [2])
        , .M_BID               (BUS_BID     [2])
        , .M_BRESP             (BUS_BRESP   [2])
        , .M_BVALID            (BUS_BVALID  [2])
        , .M_BREADY            (BUS_BREADY  [2])
        , .M_ARID              (BUS_ARID    [2])
        , .M_ARADDR            (BUS_ARADDR  [2])
        , .M_ARLEN             (BUS_ARLEN   [2])
        , .M_ARLOCK            (BUS_ARLOCK  [2][0])
        , .M_ARSIZE            (BUS_ARSIZE  [2])
        , .M_ARBURST           (BUS_ARBURST [2])
        `ifdef AMBA_AXI_CACHE
        , .M_ARCACHE           (BUS_ARCACHE [2])
        `endif
        `ifdef AMBA_AXI_PROT
        , .M_ARPROT            (BUS_ARPROT  [2])
        `endif
        , .M_ARVALID           (BUS_ARVALID [2])
        , .M_ARREADY           (BUS_ARREADY [2])
        , .M_RID               (BUS_RID     [2])
        , .M_RDATA             (BUS_RDATA   [2])
        , .M_RRESP             (BUS_RRESP   [2])
        , .M_RLAST             (BUS_RLAST   [2])
        , .M_RVALID            (BUS_RVALID  [2])
        , .M_RREADY            (BUS_RREADY  [2])
   );
   assign BUS_AWLOCK[2][1] = 1'b0;
   assign BUS_ARLOCK[2][1] = 1'b0;
   assign BUS_WID   [2]    =  'h0;
   //---------------------------------------------------------------------------
   // It responds AMBA AXI4 transactions.
   axi4_mem_beh #(.AXI_WIDTH_ID   ( WIDTH_ID     )// ID width in bits
                 ,.AXI_WIDTH_AD   ( WIDTH_AD     )// address width
                 ,.AXI_WIDTH_DA   ( WIDTH_DA     )// data width
                 ,.P_SIZE_IN_BYTES(`SIZE_IN_BYTES))
   u_axi_mem (
          .ARESETn  (ARESETn         )
        , .ACLK     (ACLK            )
        , .AWID     (BUS_AWID     [2])
        , .AWADDR   (BUS_AWADDR   [2])
        , .AWLEN    (BUS_AWLEN    [2])
        , .AWLOCK   (BUS_AWLOCK   [2][0])
        , .AWSIZE   (BUS_AWSIZE   [2])
        , .AWBURST  (BUS_AWBURST  [2])
        , .AWVALID  (BUS_AWVALID  [2])
        , .AWREADY  (BUS_AWREADY  [2])
        , .WDATA    (BUS_WDATA    [2])
        , .WSTRB    (BUS_WSTRB    [2])
        , .WLAST    (BUS_WLAST    [2])
        , .WVALID   (BUS_WVALID   [2])
        , .WREADY   (BUS_WREADY   [2])
        , .BID      (BUS_BID      [2])
        , .BRESP    (BUS_BRESP    [2])
        , .BVALID   (BUS_BVALID   [2])
        , .BREADY   (BUS_BREADY   [2])
        , .ARID     (BUS_ARID     [2])
        , .ARADDR   (BUS_ARADDR   [2])
        , .ARLEN    (BUS_ARLEN    [2])
        , .ARLOCK   (BUS_ARLOCK   [2][0])
        , .ARSIZE   (BUS_ARSIZE   [2])
        , .ARBURST  (BUS_ARBURST  [2])
        , .ARVALID  (BUS_ARVALID  [2])
        , .ARREADY  (BUS_ARREADY  [2])
        , .RID      (BUS_RID      [2])
        , .RDATA    (BUS_RDATA    [2])
        , .RRESP    (BUS_RRESP    [2])
        , .RLAST    (BUS_RLAST    [2])
        , .RVALID   (BUS_RVALID   [2])
        , .RREADY   (BUS_RREADY   [2])
   );
   //---------------------------------------------------------------------------
   initial begin
       wait(ARESETn==1'b0);
       wait(ARESETn==1'b1);
       repeat (5) @ (posedge ACLK);
       wait(u_tester.done==1'b1);
       repeat (5) @ (posedge ACLK);
       $finish(2);
   end
   //---------------------------------------------------------------------------
   initial begin
      `ifdef VCD
          // use +define+VCD in 'vlog'
          $dumpfile("wave.vcd");
          $dumpvars(0);
      `else
           // use +VCD in 'vsim'
           if ($test$plusargs("VCD")) begin
               $dumpfile("wave.vcd");
               $dumpvars(5);
           end
      `endif
   end
   //---------------------------------------------------------------------------
endmodule
